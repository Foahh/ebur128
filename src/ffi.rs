/* automatically generated by rust-bindgen */

pub const EBUR128_VERSION_MAJOR: u32 = 1;
pub const EBUR128_VERSION_MINOR: u32 = 2;
pub const EBUR128_VERSION_PATCH: u32 = 4;
pub const channel_EBUR128_UNUSED: channel = 0;
pub const channel_EBUR128_LEFT: channel = 1;
pub const channel_EBUR128_Mp030: channel = 1;
pub const channel_EBUR128_RIGHT: channel = 2;
pub const channel_EBUR128_Mm030: channel = 2;
pub const channel_EBUR128_CENTER: channel = 3;
pub const channel_EBUR128_Mp000: channel = 3;
pub const channel_EBUR128_LEFT_SURROUND: channel = 4;
pub const channel_EBUR128_Mp110: channel = 4;
pub const channel_EBUR128_RIGHT_SURROUND: channel = 5;
pub const channel_EBUR128_Mm110: channel = 5;
pub const channel_EBUR128_DUAL_MONO: channel = 6;
pub const channel_EBUR128_MpSC: channel = 7;
pub const channel_EBUR128_MmSC: channel = 8;
pub const channel_EBUR128_Mp060: channel = 9;
pub const channel_EBUR128_Mm060: channel = 10;
pub const channel_EBUR128_Mp090: channel = 11;
pub const channel_EBUR128_Mm090: channel = 12;
pub const channel_EBUR128_Mp135: channel = 13;
pub const channel_EBUR128_Mm135: channel = 14;
pub const channel_EBUR128_Mp180: channel = 15;
pub const channel_EBUR128_Up000: channel = 16;
pub const channel_EBUR128_Up030: channel = 17;
pub const channel_EBUR128_Um030: channel = 18;
pub const channel_EBUR128_Up045: channel = 19;
pub const channel_EBUR128_Um045: channel = 20;
pub const channel_EBUR128_Up090: channel = 21;
pub const channel_EBUR128_Um090: channel = 22;
pub const channel_EBUR128_Up110: channel = 23;
pub const channel_EBUR128_Um110: channel = 24;
pub const channel_EBUR128_Up135: channel = 25;
pub const channel_EBUR128_Um135: channel = 26;
pub const channel_EBUR128_Up180: channel = 27;
pub const channel_EBUR128_Tp000: channel = 28;
pub const channel_EBUR128_Bp000: channel = 29;
pub const channel_EBUR128_Bp045: channel = 30;
pub const channel_EBUR128_Bm045: channel = 31;
pub type channel = u32;
pub const error_EBUR128_SUCCESS: error = 0;
pub const error_EBUR128_ERROR_NOMEM: error = 1;
pub const error_EBUR128_ERROR_INVALID_MODE: error = 2;
pub const error_EBUR128_ERROR_INVALID_CHANNEL_INDEX: error = 3;
pub const error_EBUR128_ERROR_NO_CHANGE: error = 4;
pub type error = u32;
pub const mode_EBUR128_MODE_M: mode = 1;
pub const mode_EBUR128_MODE_S: mode = 3;
pub const mode_EBUR128_MODE_I: mode = 5;
pub const mode_EBUR128_MODE_LRA: mode = 11;
pub const mode_EBUR128_MODE_SAMPLE_PEAK: mode = 17;
pub const mode_EBUR128_MODE_TRUE_PEAK: mode = 49;
pub const mode_EBUR128_MODE_HISTOGRAM: mode = 64;
pub type mode = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ebur128_state_internal {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ebur128_state {
    pub mode: ::std::os::raw::c_int,
    pub channels: ::std::os::raw::c_uint,
    pub samplerate: ::std::os::raw::c_ulong,
    pub d: *mut ebur128_state_internal,
}
extern "C" {
    pub fn ebur128_get_version(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        patch: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ebur128_libinit();
}
extern "C" {
    pub fn ebur128_init(
        channels: ::std::os::raw::c_uint,
        samplerate: ::std::os::raw::c_ulong,
        mode: ::std::os::raw::c_int,
    ) -> *mut ebur128_state;
}
extern "C" {
    pub fn ebur128_destroy(st: *mut *mut ebur128_state);
}
extern "C" {
    pub fn ebur128_set_channel(
        st: *mut ebur128_state,
        channel_number: ::std::os::raw::c_uint,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_change_parameters(
        st: *mut ebur128_state,
        channels: ::std::os::raw::c_uint,
        samplerate: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_set_max_window(
        st: *mut ebur128_state,
        window: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_set_max_history(
        st: *mut ebur128_state,
        history: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_add_frames_short(
        st: *mut ebur128_state,
        src: *const ::std::os::raw::c_short,
        frames: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_add_frames_int(
        st: *mut ebur128_state,
        src: *const ::std::os::raw::c_int,
        frames: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_add_frames_float(
        st: *mut ebur128_state,
        src: *const f32,
        frames: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_add_frames_double(
        st: *mut ebur128_state,
        src: *const f64,
        frames: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_loudness_global(st: *mut ebur128_state, out: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_loudness_global_multiple(
        sts: *mut *mut ebur128_state,
        size: usize,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_loudness_momentary(
        st: *mut ebur128_state,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_loudness_shortterm(
        st: *mut ebur128_state,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_loudness_window(
        st: *mut ebur128_state,
        window: ::std::os::raw::c_ulong,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_loudness_range(st: *mut ebur128_state, out: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_loudness_range_multiple(
        sts: *mut *mut ebur128_state,
        size: usize,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_sample_peak(
        st: *mut ebur128_state,
        channel_number: ::std::os::raw::c_uint,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_prev_sample_peak(
        st: *mut ebur128_state,
        channel_number: ::std::os::raw::c_uint,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_true_peak(
        st: *mut ebur128_state,
        channel_number: ::std::os::raw::c_uint,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_prev_true_peak(
        st: *mut ebur128_state,
        channel_number: ::std::os::raw::c_uint,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ebur128_relative_threshold(
        st: *mut ebur128_state,
        out: *mut f64,
    ) -> ::std::os::raw::c_int;
}
